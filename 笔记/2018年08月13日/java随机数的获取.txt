一、方法

1、(数据类型)(最小值+Math.random()*(最大值-最小值+1))

例:
(int)(1+Math.random()*(10-1+1))
从1到10的int型随数


package com; 

public class test2 {
    public static void main(String[] args) {
        System.out.println((int)(1+Math.random()*(10-1+1)));
    }
}

结果：输出1到10中的其中一个数

产生随机数的方式：在j2se里我们可以使用Math.random()方法来产生一个随机数，这个产生的随机数是0-1之间的一个double，我们可以把他乘以一定的数，比如说乘以100，他就是个100以内的随机，这个在j2me中没有。

 

2、for (int i=0;i<30;i++)
{System.out.println((int)(1+Math.random()*10));}

通过java.Math包的random方法得到1-10的int随机数
公式是:最小值---最大值（整数）的随机数
（类型）最小值+Math.random()*最大值


package com;

public class test2 {
    public static void main(String[] args) {
        for (int i=0;i<30;i++)
        {System.out.println((int)(1+Math.random()*10));} 
    }
}

结果：

10
7
3
6
1
6
1
8
4
8
10
5
4
10
4
7
3
3
8
1
3
10
5
2
2
10
10
8
2
10
Process finished with exit code 0（得到30个1到10中的随机数）
 
 
3、Random ra =new Random();
for (int i=0;i<30;i++)
{System.out.println(ra.nextInt(10)+1);}
通过java.util包中的Random类的nextInt方法来得到1-10的int随机数

package com;

import java.util.Random;

public class test2 {
    public static void main(String[] args) {
        Random ra =new Random();
        for (int i=0;i<10;i++)
        {System.out.println(ra.nextInt(10)+1);}
    }
}

产生随机数的方式：在java.util这个包里面提供了一个Random的类，我们可以新建一个Random的对象来产生随机数，他可以产生随机整数、随机float、随机double，随机long，这个也是我们在j2me的程序里经常用的一个取随机数的方法。

 

对于Random类有以下说明：

java.util.Random类有两种方式构建方式：带种子和不带种子

不带种子：
此种方式将会返回随机的数字，每次运行结果不一样


package com; 
public class test2 {
    public static void main(String[] args) {
        java.util.Random r=new java.util.Random();
        for(int i=0;i<10;i++){
            System.out.println(r.nextInt());
        }
    }
}

结果：

　　　　

 

带种子：
此种方式，无论程序运行多少次，返回结果都是一样的

复制代码
package com;
public class test2 {
    public static void main(String[] args) {
        java.util.Random r=new java.util.Random(10);
        for(int i=0;i<10;i++){
            System.out.println(r.nextInt());
        }
    }
}

结果：

　　　　 



 



 两种方式的差别在于：

（1）、打开Java Doc，我们会看到Random类的说明：

此类的实例用于生成伪随机数流，此类使用 48 位的种子，该种子可以使用线性同余公式对其进行修改。

如果用相同的种子创建两个 Random实例，则对每个实例进行相同的方法调用序列，它们将生成并返回相同的数字序列。为了保证实现这种特性，我们为类Random指定了特定的算法。为了Java 代码的完全可移植性，Java 实现必须让类 Random 使用此处所示的所有算法。但是允许 Random类的子类使用其他算法，只要其符合所有方法的常规协定即可。

(2)、如果没有提供种子数，Random实例的种子数将是当前时间的毫秒数，可以通过System.currentTimeMillis()来获得当前时间的毫秒数。打开JDK的源代码，我们可以非常明确地看到这一点。

public Random() { this(System.currentTimeMillis()); }

另外：

random对象的nextInt(),nextInt(int n)方法的说明：

int nextInt()
   返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 int 值。
int nextInt(int n)
   返回一个伪随机数，它是从此随机数生成器的序列中取出的、在 0（包括）和指定值（不包括）之间均匀分布的int值。  

 

Java随机数总结
随机数在实际中使用很广泛，比如要随即生成一个固定长度的字符串、数字。或者随即生成一个不定长度的数字、或者进行一个模拟的随机选择等等。Java提供了最基本的工具，可以帮助开发者来实现这一切。

　　一、Java随机数的产生方式

 

　　在Java中，随机数的概念从广义上将，有三种。

 

　　1、通过System.currentTimeMillis()来获取一个当前时间毫秒数的long型数字。

 

　　2、通过Math.random()返回一个0到1之间的double值。

 

　　3、通过Random类来产生一个随机数，这个是专业的Random工具类，功能强大。

 

　　二、Random类API说明

 

　　1、Java API说明

 

　　Random类的实例用于生成伪随机数流。此类使用 48 位的种子，使用线性同余公式对其进行修改(请参阅 DonaldKnuth 的《The Art of Computer Programming， Volume 2》，第 3.2.1 节)。

 

　　如果用相同的种子创建两个 Random实例，则对每个实例进行相同的方法调用序列，它们将生成并返回相同的数字序列。为了保证属性的实现，为类 Random指定了特定的算法。

 

　　很多应用程序会发现 Math 类中的 random 方法更易于使用。

 

　　2、方法摘要

 

　　Random()

 

　　创建一个新的随机数生成器。

 

　　Random(long seed)

 

　　使用单个 long 种子创建一个新随机数生成器： public Random(long seed) {setSeed(seed); } next 方法使用它来保存随机数生成器的状态。

 

　　protected int next(int bits)

 

　　生成下一个伪随机数。

 

　　boolean nextBoolean()

 

　　返回下一个伪随机数，它是从此随机数生成器的序列中取出的、均匀分布的 boolean 值。

 

　　void nextBytes(byte[] bytes)

 

　　生成随机字节并将其置于用户提供的字节数组中。

 

　　double nextDouble()

 

　　返回下一个伪随机数，它是从此随机数生成器的序列中取出的、在 0.0 和 1.0之间均匀分布的 double 值。

 

　　float nextFloat()

 

　　返回下一个伪随机数，它是从此随机数生成器的序列中取出的、在 0.0 和 1.0 之间均匀分布的 float 值。

 

　　double nextGaussian()

 

　　返回下一个伪随机数，它是从此随机数生成器的序列中取出的、呈高斯(“正常地”)分布的 double 值，其平均值是0.0，标准偏差是 1.0。

 

　　int nextInt()

 

　　返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 int 值。

 

　　int nextInt(int n)

 

　　返回一个伪随机数，它是从此随机数生成器的序列中取出的、在 0(包括)和指定值(不包括)之间均匀分布的 int值。

 

　　long nextLong()

 

　　返回下一个伪随机数，它是从此随机数生成器的序列中取出的、均匀分布的 long 值。

 

　　void setSeed(long seed)

 

　　使用单个 long 种子设置此随机数生成器的种子。

 

　　三、Random类使用说明

 

　　1、带种子与不带种子的区别Random类使用的根本是策略分带种子和不带种子的Random的实例。

 

　　通俗说，两者的区别是：带种子的，每次运行生成的结果都是一样的。

 

　　不带种子的，每次运行生成的都是随机的，没有规律可言。

 

　　2、创建不带种子的Random对象

 

　　Random random = new Random();

 

　　3、创建不带种子的Random对象有两种方法：

 

　　1) Random random = new Random(555L);

 

　　2) Random random = new Random();random.setSeed(555L);

 

　　四、测试

 

　　通过一个例子说明上面的用法

 

　　import java.util.Random;

 

　　

 

　　public class TestRandomNum {

 

　　public static void main(String[] args) {

 

　　randomTest();

 

　　testNoSeed();

 

　　testSeed1();

 

　　testSeed2();

 

　　}

 

　　public static void randomTest() {

　　System.out.println("--------------test()--------------");

　　//返回以毫秒为单位的当前时间。

　　long r1 = System.currentTimeMillis();

　　//返回带正号的 double 值，大于或等于 0.0，小于 1.0。

　　double r2 = Math.random();

　　//通过Random类来获取下一个随机的整数

　　int r3 = new Random().nextInt();

　　System.out.println("r1 = " + r1);

　　System.out.println("r3 = " + r2);

　　System.out.println("r2 = " + r3);

　　}

　　public static void testNoSeed() {

　　System.out.println("--------------testNoSeed()--------------");

　　//创建不带种子的测试Random对象

　　Random random = new Random();

　　for (int i = 0; i < 3; i++) {

　　System.out.println(random.nextInt());

　　}

　　}

 

　　public static void testSeed1() {

　　System.out.println("--------------testSeed1()--------------");

　　//创建带种子的测试Random对象

　　Random random = new Random(555L);

　　for (int i = 0; i < 3; i++) {

　　System.out.println(random.nextInt());

　　}

　　}

　　public static void testSeed2() {

　　System.out.println("--------------testSeed2()--------------");

　　//创建带种子的测试Random对象

　　Random random = new Random();

　　random.setSeed(555L);

　　for (int i = 0; i < 3; i++) {

　　System.out.println(random.nextInt());

　　}

　　}

　　}

 

　　运行结果：

 

　　--------------test()--------------

 

　　r1 = 1227108626582

　　r3 = 0.5324887850155043

　　r2 = -368083737

 

　　--------------testNoSeed()--------------

 

　　809503475

　　1585541532

　　-645134204

 

　　--------------testSeed1()--------------

 

　　-1367481220

　　292886146

　　-1462441651

 

　　--------------testSeed2()--------------

 

　　-1367481220

　　292886146

　　-1462441651

　　Process finished with exit code 0

 

　　通过testSeed1()与testSeed2()方法的结果可以看到，两个打印结果相同，因为他们种子相同，再运行一次，结果还是一样的，这就是带种子随机数的特性。

 

　　而不带种子的，每次运行结果都是随机的。

 

　　五、综合应用

 

　　下面通过最近写的一个随机数工具类来展示用法：

 

　　import java.util.Random;

　　public class RandomUtils {

　　public static final String allChar ="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

　　public static final String letterChar ="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

　　public static final String numberChar = "0123456789";

　　public static String generateString(int length) {

　　StringBuffer sb = new StringBuffer();

　　Random random = new Random();

　　for (int i = 0; i < length; i++) {

　　sb.append(allChar.charAt(random.nextInt(allChar.length())));

　　}

　　return sb.toString();

　　}

　　public static String generateMixString(int length) {

　　StringBuffer sb = new StringBuffer();

　　Random random = new Random();

　　for (int i = 0; i < length; i++) {

　　sb.append(allChar.charAt(random.nextInt(letterChar.length())));

　　}

　　return sb.toString();

　　}

　　public static String generateLowerString(int length) {

　　return generateMixString(length).toLowerCase();

　　}

　　public static String generateUpperString(int length) {

　　return generateMixString(length).toUpperCase();

　　}

 

　　

 

　　public static String generateZeroString(int length) {

　　StringBuffer sb = new StringBuffer();

　　for (int i = 0; i < length; i++) {

　　sb.append('0');

　　}

　　return sb.toString();

　　}

 

　　

 

　　public static String toFixdLengthString(long num, intfixdlenth) {

　　StringBuffer sb = new StringBuffer();

　　String strNum = String.valueOf(num);

　　if (fixdlenth - strNum.length() >= 0) {

　　sb.append(generateZeroString(fixdlenth -strNum.length()));

　　} else {

　　throw new RuntimeException("将数字" + num + "转化为长度为" + fixdlenth+ "的字符串发生异常!");

　　}

　　sb.append(strNum);

　　return sb.toString();

　　}

 

　　

 

　　public static String toFixdLengthString(int num, intfixdlenth) {

　　StringBuffer sb = new StringBuffer();

　　String strNum = String.valueOf(num);

　　if (fixdlenth - strNum.length() >= 0) {

　　sb.append(generateZeroString(fixdlenth -strNum.length()));

　　} else {

　　throw new RuntimeException("将数字" + num + "转化为长度为" + fixdlenth+ "的字符串发生异常!");

　　}

　　sb.append(strNum);

　　return sb.toString();

　　}

 

　　public static void main(String[] args) {

　　System.out.println(generateString(15));

　　System.out.println(generateMixString(15));

　　System.out.println(generateLowerString(15));

　　System.out.println(generateUpperString(15));

System.out.println(generateZeroString(15));

　　System.out.println(toFixdLengthString(123, 15));

　　System.out.println(toFixdLengthString(123L, 15));

　　}

　　}

　　运行结果：

　　vWMBPiNbzfGCpHG

　　23hyraHdJkKPwMv

　　tigowetbwkm1nde

　　BPZ1KNEJPHB115N

　　000000000000000

　　000000000000123

　　000000000000123

　　Process finished with exit code 0

　　六、总结

　　1、随机数很常用，在Java有三种产生方式，以Random随机数的使用最为复杂。

　　2、Random类对象有是否带种子之分，带种子的只要种子相同，多次运行，生成随机数的结果总是那样。

　　3、带种子随机数的带种子的对象创建方式有两种，效果一样。但是带种子的随机数用处似乎不大。

　　4、Random的功能涵盖了Math.random()的功能。

　　5、可以通过随机数去做实现随机字符串等复杂的随机数据。

　　6、不要研究不重复的随机数，意义不大。

在Java中我们可以使用java.util.Random类来产生一个随机数发生器。它有两种形式的构造函数，分别是Random()和Random(longseed)。Random()使用当前时间即System.currentTimeMillis()作为发生器的种子，Random(longseed)使用指定的seed作为发生器的种子。

       随机数发生器(Random)对象产生以后，通过调用不同的method：nextInt()、nextLong()、nextFloat()、nextDouble()等获得不同类型随机数。

      1>生成随机数
          Random random = new Random();
          Random random = new Random(100);//指定种子数100
          random调用不同的方法，获得随机数。
          如果2个Random对象使用相同的种子（比如都是100），并且以相同的顺序调用相同的函数，那它们返回值完全相同。如下面代码中两个Random对象的输出完全相同
         import java.util.*;
         class TestRandom {
               public static void main(String[] args) {
                    Random random1 = new Random(100);
                    System.out.println(random1.nextInt());
                    System.out.println(random1.nextFloat());
                    System.out.println(random1.nextBoolean());
                    Random random2 = new Random(100);
                    System.out.println(random2.nextInt());
                    System.out.println(random2.nextFloat());
                    System.out.println(random2.nextBoolean()); 

 

生成0到1之间的任意随机小数：
生成[0,d)区间的随机小数，d为任意正的小数，则只需要将nextDouble方法的返回值乘以d即可。

[n1，n2]

也就是 ra.nextDouble() *(n2-n1)+n1


package com;

import java.util.Random;

public class test2 {
    public static void main(String[] args) {
        Random ra =new Random(); 
        System.out.println(ra.nextDouble() *(0-0.01)+0.1);
    }
}

结果：0.09271514309901191


package com;
//创建一个接口

import java.util.Random;

public class test2 {
    public static void main(String[] args) {
        Random ra =new Random();
        System.out.println(ra.nextDouble() *(0-0.01)+0.01);
    }
}

结果：0.0012497282186146978

 

产生随机数的方式：在我们的System类中有一个currentTimeMillis()方法，这个方法返回一个从1970年1月1号0点0分0秒到目前的一个毫秒数，返回类型是long，我们可以拿他作为一个随机数，我们可以拿他对一些数取模，就可以把他限制在一个范围之内啦