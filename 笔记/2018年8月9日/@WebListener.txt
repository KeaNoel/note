Servlet3.0中的监听器跟之前2.5的差别不大，唯一的区别就是增加了对注解的支持。在3.0以前我们的监听器配置都是需要配置在web.xml文件中的。在3.0中我们有了更多的选择，之前在web.xml文件中配置的方式还是可以的，同时我们还可以使用注解进行配置。对于使用注解的监听器就是在监听器类上使用@WebListener进行标注，这样Web容器就会把它当做一个监听器进行注册和使用了。

 

       监听器类应该实现下面接口之一：

1.对Request的监听有ServletRequestListener和ServletRequestAttributeListener。前者可见监听Request的创建和销毁；而后者可以对Request的属性进行监听。

2.对Session的监听有HttpSessionListener和HttpSessionAttributeListener。HttpSessionListener可以监听HttpSession的创建跟销毁，而HttpSessionAttributeListener则是对session中属性的监听，它可以监听到session新增属性、移除属性和属性值被替换时。

3.对于ServletContext的监听器有ServletContextListener和ServletContextAttributeListener。ServletContextListener可以监听到ServletContext的创建和销毁，而ServletContextAttributeListener可以监听到ServletContext中属性的新增、移除和属性值的替换。



实例1：

 
import javax.servlet.annotation.WebListener;
import javax.servlet.http.HttpSessionAttributeListener;
import javax.servlet.http.HttpSessionBindingEvent;
import javax.servlet.http.HttpSessionEvent;
import javax.servlet.http.HttpSessionListener;
 
/**
 *
 * HttpSession监听器和HttpSession属性监听器
 *
 */
@WebListener
public class SessionListener implements HttpSessionAttributeListener,
       HttpSessionListener {
 
    @Override
    public void sessionCreated(HttpSessionEvent se) {
       System.out.println("session created");
    }
 
    @Override
    public void sessionDestroyed(HttpSessionEvent se) {
       System.out.println("session destroyed");
    }
 
    @Override
    public void attributeAdded(HttpSessionBindingEvent event) {
       System.out.println("session attribute added");
    }
 
    @Override
    public void attributeRemoved(HttpSessionBindingEvent event) {
       System.out.println("session attribute removed");
    }
 
    @Override
    public void attributeReplaced(HttpSessionBindingEvent event) {
       System.out.println("session attribute replaced");
    }
 
}

实例2:
 
import javax.servlet.ServletContextAttributeEvent;
import javax.servlet.ServletContextAttributeListener;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;
 
/**
 *
 * ServletContext监听器和ServletContext属性监听器
 *
 */
@WebListener
public class ContextListener implements ServletContextAttributeListener,
       ServletContextListener {
 
    @Override
    public void contextDestroyed(ServletContextEvent sce) {
       System.out.println("ServletContext destroyed");
    }
 
    @Override
    public void contextInitialized(ServletContextEvent sce) {
       System.out.println("ServletContext initialized");
    }
 
    @Override
    public void attributeAdded(ServletContextAttributeEvent event) {
       System.out.println("ServletContext attribute added");
    }
 
    @Override
    public void attributeRemoved(ServletContextAttributeEvent event) {
       System.out.println("ServletContext attribute removed");
    }
 
    @Override
    public void attributeReplaced(ServletContextAttributeEvent event) {
       System.out.println("ServletContext attribute replaced");
    }
 
}

为了文章的完整性，下面将给出上面监听器对应的在web.xml中配置的方式。
    <listener>
       <listener-class>com.xxx.SessionListener</listener-class>
    </listener>
    <listener>
       <listener-class>com.xxx.ContextListener</listener-class>
    </listener>
